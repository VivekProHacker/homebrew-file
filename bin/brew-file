#!/usr/bin/env bash

## Description {{{
#
# Brew-file: Manager for packages of Homebrew
# https://github.com/rcmdnk/homebrew-file
#
# Usage: brew-file [-increvh][-f <input file>][command] ...
#
BREW_FILE_VERSION=v1.1.6
SENTAKU_DATE="1/Sep/2014"
#
# }}}
#############################################

#The MIT License (MIT) {{{
#
#Copyright (c) 2013 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# }}}

# Variables {{{
input=${HOMEBREW_BREWFILE:-"$(brew --prefix)/Library/Brewfile"}
brewfile="$input"
repo=""
install=0
brew=0
noinit=0
link=1
cleanup=0
dryrun=1
init=0
initialized=0
edit=0
set_repo=0
pull=0
push=0
update=0
casklist=0
cask_upgrade=0
tap_dir="$(brew --prefix)/Library/Taps"
cache_dir=$(brew --cache)
cask_pack="brew-cask"
cask_repo="phinze/cask"
pip_pack="brew-pip"
my_editor=${EDITOR:-"vim"}
is_cask_cmd=0
is_pip_cmd=0
caskroom="/opt/homebrew-cask/Caskroom"
yes_no=0
noupdate=0

thisname=$(basename $0)
if [ "$thisname" = "brew-file" ];then
  thisname="brew file"
fi
# }}}

# Help {{{
HELP="Usage: $thisname [-increvh][-f <input file>][command] ...

Commands:
  install            : Install packages in BREWFILE (do 'brew update', too).
  brew [command ...] : Execute brew command, and update BREWFILE.
  brew noinit [command ...] : Execute brew command, w/o update of BREWFILE.
  init     (or -i)   : Initialize/Update BREWFILE with installed packages.
  set_repo (or -s)   : Set BREWFILE repository (e.g. rcmdnk/Brewfile).
  pull               : Update BREWFILE from the repository.
  push               : Push your BREWFILE to the repository.
  clean    (or -c)   : Clenup
                     Uninstall packages not in the list.
                     Untap packages not in the list.
                     Cleanup cache (brew cleanup)
                     By drault, cleanup runs as dry-run.
                     If you want to enforce cleanup, use '-C' option.
  update   (or -u)   : Do pull, install, brew update/upgrade, init, push and clean -C.
                     pull, push and clean are done only if
                     the repository is assigned.
  edit     (or -e)   : Edit input file.
  casklist           : Check applications for Cask
  cask_upgrade       : Upgrade cask applications
  version  (or -v)   : Show version.
  help     (or -h)   : Print Help (this message) and exit.

Options:
  -f  <file> Set input file (current default: ${input})
             You can set input file by environmental variable,
             HOMEBREW_BREWFILE, like:
                  export HOMEBREW_BREWFILE=~/.brewfile
  -n         Don't make links for Apps
  -C         Run cleanup in non dry-run mode.
             In addition, do cleanup in cask_upgrade.
  -r  <repo> Set repository name. Use with set_repo (-s).
  -y         Answer yes to yes/no questions.
  -U         Don't execute brew update in initialize or other commands.

If you want to use repository's BREWFILE,
please prepare a repository which has a file named 'Brewfile'.
If you assign the repository which doesn't have 'Brewfile',
then Brew-file will try to make 'Brewfile' in the repository.
For GitHub repository, you can shorten the address like user_name/repo_name.

"
# }}}

# Check arguments {{{
ncommands=0
while [ $# != 0 ] ; do
  case $1 in
    -f )
      input=$2; shift;
      ;;
    install)
      install=1; : $((ncommands++));
      ;;
    brew)
      brew=1
      shift
      if [ "$1" = "noinit" ];then
        noinit=1
        shift
      fi
      brew_args="$@"; : $((ncommands++)); break;
      ;;
    -i|init)
      init=1; : $((ncommands++));
      ;;
    -s|set_repo)
      set_repo=1; : $((ncommands++));
      ;;
    -r )
      repo=$2; shift;
      ;;
    pull)
      pull=1; : $((ncommands++));
      ;;
    push)
      push=1; : $((ncommands++));
      ;;
    -n)
      link=0;
      ;;
    -c|clean)
      cleanup=1; : $((ncommands++));
      ;;
    -u|update)
      update=1; : $((ncommands++));
      ;;
    -C)
      dryrun=0;
      ;;
    -e|edit)
      edit=1; : $((ncommands++));
      ;;
    casklist)
      casklist=1; : $((ncommands++));
      ;;
    cask_upgrade)
      cask_upgrade=1; : $((ncommands++));
      ;;
    -y)
      yes_no=1;
      ;;
    -U)
      noupdate=1;
      ;;
    -v|version)
      echo "$thisname $BREW_FILE_VERSION";exit 0;
      ;;
    -h|help)
      echo "$HELP"|${PAGER:-less} 1>&2; exit 0;
      ;;
    *)
      echo "$thisname $1: unknown argument

Check \"$thisname help\" for further information" 1>&2; exit 1;
      ;;
  esac
  shift
done

if [ $ncommands -eq 0 ];then
  echo "$HELP"|head -n1 1>&2;
  echo
  echo "Check \"$thisname help\" for further information" 1>&2; exit 0;
elif [ $ncommands -ne 1 ];then
  echo "More than 1 commands are given!"
  echo
  echo "Check \"$thisname help\" for further information" 1>&2; exit 0;
fi
# }}}

# Function {{{

function ask_yn { # Helper for yes/no {{{
  question="$1"
  printf "$1 [y/n]: "
  if [ $yes_no -eq 1 ];then
    yn=yes
    echo y
    reutnr 0
  else
    read yn
  fi
  while [ 1 ];do
    case $yn in
      "y"|"Y"|"yes"|"Yes"|"YES" )
        return 0
        ;;
      "n"|"N"|"no"|"No"|"NO" )
        return 1
        ;;
      * )
        printf "Answer with yes (y) or no (n): "
        read yn
        continue
        ;;
    esac
  done
} # }}}

function repo_file { # Helper to build brewfile path for the repository {{{
  repo_name=$(basename ${repo%.git})
  user_name=$(echo $(basename $(dirname $repo))|awk '{n=split($1,tmp,":")}{print tmp[n]}')
  inputdir=$(dirname $input)
  echo $inputdir/${user_name}_${repo_name}/$(basename $input)
} # }}}

function check_github_repo { # Helper to check and create github repository {{{
  repo_name=$(basename ${repo%.git})
  user_name=$(echo $(basename $(dirname $repo))|awk '{n=split($1,tmp,":")}{print tmp[n]}')

  # Check if the repository already exists or not.
  ret=$(curl --head https://github.com/$user_name/$repo_name 2>/dev/null|head -n1)
  if echo $ret| grep -q "OK";then
    git clone $repo $(dirname $brewfile)
    if [ $? -ne 0 ];then
      echo "Can't clone $repo."
      echo "Please check the repository, or reset with"
      echo "    $ $thisname set_repo"
      exit 1
    fi
    return
  fi

  # Create new repository
  echo "GitHub repository: $user_name/$repo_name doesn't exist."
  ask_yn "Do you want to create the repository?"
  ret=$?
  echo
  if [ $ret -ne 0 ];then
    exit 1
  fi

  # Check password
  echo -n "GitHub password: "
  read -s pass
  echo

  # Try to create w/o two-factor code
  description="Package list for Homebrew"
  while [ 1 ];do
    ret=$(curl -u ${user_name}:${pass} https://api.github.com/user/repos -d "{\"name\":\"$repo_name\",\"description\":\"$description\",\"auto_init\":true}" 2>/dev/null)
    if ! echo $ret| grep -q "Bad credentials";then
      break
    fi
    printf "\e[31;1mWrong Password!\e[0m GitHub Password: "
    read -s pass
    echo
  done

  # If it failed, try with two-factor code
  if echo $ret| grep -q "Must specify two-factor authentication OTP code";then
    echo -n "GitHub Two-Factor Code: "
    read twofac
    while [ 1 ];do
      ret=$(curl -u ${user_name}:${pass} -H "X-GitHub-OTP: $twofac" https://api.github.com/user/repos -d "{\"name\":\"$repo_name\",\"description\":\"$description\",\"auto_init\":true}" 2>/dev/null)
      if ! echo $ret| grep -q "Must specify two-factor authentication OTP code";then
        break
      fi
      printf "\e[31;1mWrong code!\e[0m GitHub Two-Factor Code: "
      read twofac
    done
  fi

  # Initialize the repository
  git clone $repo $(dirname $brewfile)
  if [ $? -ne 0 ];then
    echo "Can't clone $repo."
    echo "Please check the repository, or reset with"
    echo "    $ $thisname set_repo"
    exit 1
  fi
  cd $(dirname $brewfile)
  if [ $? -ne 0 ];then
    echo "Can't cd to $(dirname $brewfile)."
    echo "Please check the repository, or reset with"
    echo "    $ $thisname set_repo"
    exit 1
  fi
  echo "# $repo_name

Package list for [Homebrew](http://brew.sh/).

Managed by [homebrew-file](https://github.com/rcmdnk/homebrew-file).
" > README.md
  touch $(basename $input)
  git add -A
  git commit -m "Prepared by $thisname"
  git push
  cd -

  echo
  ask_yn "Do you want to initialize from installed packages?"
  ret=$?
  if [ $ret -eq 0 ];then
    initialize 0
    return $?
  fi
} # }}}

function check_repo { # Helper check repository file {{{
  if [ ! -f $input ];then
    return 0
  fi
  if ! grep -q "^ *git" $input;then
    return 0
  fi
  repo=$(grep "^ *git" $input |awk '{print $2}')
  if [ "$repo" = "" ];then
    return 0
  fi
  if [[ ! $repo =~ ^git ]] && [[ ! $repo =~ ^http ]];then
    repo=git@github.com:$repo
  fi
  brewfile=$(repo_file)
  if [ ! -d $(dirname $brewfile) ];then
    if echo $repo |grep -q "github";then
      check_github_repo
    else
      git clone $repo $(dirname $brewfile)
      if [ $? -ne 0 ];then
        echo "Can't clone $repo."
        echo "Please check the repository, or reset with"
        echo "    $ $thisname set_repo"
        exit 1
      fi
    fi
  fi
} # }}}

function repomgr { # Helper repository management {{{
  local l_pull=$pull
  local l_push=$push
  if [ "$1" = "pull" ];then
    l_pull=1
    l_push=0
  elif [ "$1" = "push" ];then
    l_pull=0
    l_push=1
  fi
  if [ "$repo" = "" ];then
    echo "Please set the repository, or reset with"
    echo "    $ $thisname set_repo"
    return 1
  fi
  if [ ! -d $(dirname $brewfile) ];then
    git clone $repo $(dirname $brewfile)
  fi
  cd $(dirname $brewfile)
  if [ $l_pull -eq 1 ];then
    git pull
    return 0
  elif [ $l_push -eq 1 ];then
    git add $(basename $brewfile)
    git commit -m "Updated the Package List"
    git push
    return 0
  fi
} # }}}

function get_tap { # Helper for tap configuration file {{{
  tap_user=$(dirname $1)
  tap_repo=$(basename $1)
  formulae=($(ls "${tap_dir}/${tap_user}/homebrew-${tap_repo}/"*.rb 2>/dev/null))
  formulae=("${formulae[@]}" $(ls "${tap_dir}/${tap_user}/homebrew-${tap_repo}/Formula/"*.rb 2>/dev/null))
  tap_packs=()
  for f in "${formulae[@]}";do
    tap_packs=("${tap_packs[@]}" $(basename "${f%.rb}"))
  done
  casks=($(ls "${tap_dir}/${tap_user}/homebrew-${tap_repo}/Casks/"*rb 2>/dev/null))
  tap_casks=()
  for c in "${casks[@]}";do
    tap_casks=("${tap_casks[@]}" $(basename "${c%.rb}"))
  done
  return 0
} # }}}

function check_cask_cmd { # If cask is installed or not {{{
  if [ $is_cask_cmd -eq 1 ];then
    return
  fi
  if brew cask >& /dev/null;then
    is_cask_cmd=1
    return
  fi
  is_cask_cmd=0
  if [ "$1" = "1" ];then
    echo "cask has not been installed, install now."
    echo brew tap ${cask_repo}
    brew tap ${cask_repo}
    tap_list=(${tap_list[@]} ${cask_repo})
    get_tap ${cask_repo}
    if ! echo " ${tap_packs[@]} "|grep -q " ${cask_pack} ";then
      echo "WARNING: ${cask_pack} was not in ${cask_repo}."
      echo "WARNING: Maybe you need to modify cask_repo."
      exit 1
    fi
    echo brew install ${cask_pack}
    brew install ${cask_pack}
    brew_list=(${brew_list[@]} ${cask_pack})
    is_cask_cmd=1
  fi
} # }}}

function check_pip_cmd { # If pip is installed or not {{{
  if [ $is_pip_cmd -eq 1 ];then
    return
  fi
  if brew pip >& /dev/null;then
    is_pip_cmd=1
    return
  fi
  is_pip_cmd=0
  if [ "$1" = "1" ];then
    echo "pip has not been installed, install now."
    echo brew install ${pip_pack}
    brew install ${pip_pack}
    brew_list=(${brew_list[@]} ${pip_pack})
    is_pip_cmd=1
  fi
} # }}}

function get_list { # Get list {{{
  brew list >/dev/null
  [ $? -ne 0 ] && exit
  brew_list=($(brew list|grep -v "^pip-"))
  pip_list=($(brew list|grep "^pip"))

  tap_list=($(brew tap))
  [ $? -ne 0 ] && exit

  cask_list=()
  cask_list_nocask=()
  check_cask_cmd
  if [ $is_cask_cmd -eq 0 ];then
    return
  fi
  while read p e;do
    if [ "$e" = "" ];then
      cask_list=(${cask_list[@]} $p)
    else
      printf "\e[31;1mThe cask file of \e[31;7m$p\e[0m\e[31;1m doesn't exist.\n"
      printf "Please check later.\n\n\e[0m"
      cask_list_nocask=(${cask_list_nocask[@]} $p)
    fi
  done < <(brew cask list)
} # }}}

function read_input { # Read input file {{{
  # Check packages in the input file
  cmd_input=()
  cask_input=()
  pip_input=()
  tap_input=()
  brew_input=()
  brew_input_opt=()
  while read line;do
    # Skip empty line/comment line
    line=${line%%#*}
    if [ "$line" = "" ];then
      continue
    fi
    # Get arguments
    args=($(echo ${line}|sed s:\'::g|sed s:\"::g))
    cmd=${args[0]}
    p=${args[1]}
    opt=${args[@]: 2}
    if [ "$p" = "install" ];then
      p=${args[2]}
      opt=${args[@]: 3}
    fi
    if [ "$cmd" = "brew" -o "$cmd" = "install" ];then
      brew_input=(${brew_input[@]} $p)
      brew_input_opt=("${brew_input_opt[@]}" "$p $opt")
    elif [ "$cmd" = "tap" ];then
      tap_input=("${tap_input[@]}" "$p $opt")
    elif [ "$cmd" = "tapall" ];then
      tap_input=("${tap_input[@]}" "$p $opt")
      get_tap $p
      ret=$?
      if [ $ret -ne 0 ];then
        continue
      fi
      brew_input=("${brew_input[@]}" "${tap_packs[@]}")
    elif [ "$cmd" = "cask" ];then
      cask_input=("${cask_input[@]}" "$p $opt")
    elif [ "$cmd" = "pip" ];then
      pip_input=("${pip_input[@]}" "$p $opt")
    else
      #echo "WARNING: $cmd is unknown, please check $brewfile"
      #continue
      cmd_input=("${cmd_input[@]}" "$line")
    fi
  done < $brewfile
} # }}}

function set_brewfile_repo { # Set Brewfile Repository {{{

  # Check input file
  if [ -f $input ];then
    if grep -q "^ *git" $input;then
      prev_repo=$(grep "^ *git" $input |awk '{print $2}')
    fi
    echo "$input is already there."
    if [ "$prev_repo" != "" ];then
      echo "Git repository for Brewfile is already set as $prev_repo."
    fi
    ask_yn "Do you want to overwrite it?"
    ret=$?
    echo
    if [ $ret -eq 0 ];then
      mv ${input} ${input}.bak
      echo "ok, old $input was moved to ${input}.bak"
    else
      return 1
    fi
  fi
  rm -f ${input}

  # Get repository
  if [ "$repo" = "" ];then
    echo
    echo 'Set repository, "non" for local Brewfile.'
    echo '<user>/<repo> for GitHub repository,'
    echo -n 'or full path for the repository: '
    read repo
    while [ "$repo" = "" ];do
      echo "Repository can't be empty."
      echo -n 'Set repository: '
      read repo
    done
  fi
  echo ""
  echo "***********************************************"
  echo "Set Brewfile Repository as $repo"
  echo "***********************************************"
  echo ""

  # Reset to no repository type Brewfile
  if [ "$repo" = "non" ];then
    initialize 0
    return $?
  fi

  # Set repository to input file
  echo "git $repo" > $input
  check_repo
  return $?
} # }}}

function get_options { # Get install options from brew info {{{
  p=$1
  # Get options for build
  local info=$(brew info $p)
  local l1=$(echo "$info"|head -n1)
  local orig_ifs=$IFS
  local versions=$(echo $l1|cut -d":" -f2)
  IFS=','
  versions=($versions)
  IFS=$orig_ifs
  local v
  local v_stable
  local v_devel
  local v_head
  for v in "${versions[@]}";do
    if echo $v|grep -q stable;then
      v_stable=$(echo $v|awk '{print $2}')
    elif echo $v|grep -q devel;then
      v_devel=$(echo $v|awk '{print $2}')
    elif echo $v|grep -q HEAD;then
      v_head=HEAD
    fi
  done
  local v_inst=$(basename $(echo "$info"|grep "^$(brew --cellar $p)"|cut -d" " -f1))
  local opt=""
  if [ "$v_inst" = "$v_stable" ];then
    opt=""
  elif [ "$v_inst" = "$v_devel" ];then
    opt=" --devel"
  elif [ "$v_inst" = "$v_head" ];then
    opt=" --HEAD"
  fi
  opt=${opt}$(echo "$info"|grep "Built from source with"|cut -d: -f2|sed -e 's/, / /g')
  echo $opt
} # }}}

function initialize { # Initialize Brewfile {{{
  if [ $initialized -eq 1 ];then
    return
  fi

  if [ "$1" != "0" ];then
    if [ ! -f $input ];then
      ask_yn "Do you want to set repository (y)? ((n) for local Brewfile)."
      ret=$?
      if [ $ret -eq 0 ];then
        set_brewfile_repo
        return $?
      fi
    else
      if [ "$repo" != "" ];then
        echo "You are using Brewfile of $repo."
      else
        echo "$input is already there."
      fi
      ask_yn "Do you want to overwrite it?"
      ret=$?
      echo
      if [ $ret -eq 0 ];then
        if [ "$repo" = "" ];then
          mv ${input} ${input}.bak
          echo "ok, old $input was moved to ${input}.bak"
        fi
      else
        return 1
      fi
    fi
  fi
  rm -f ${brewfile}
  echo ""
  echo "***********************************************"
  echo "Initialize $brewfile"
  echo "***********************************************"
  echo ""

  # Get installed package list
  get_list

  # Check list
  {
  if [ ${#tap_list[@]} -gt 0 ];then
    echo "# Tap repositories and their packages"
    for p in ${tap_list[@]};do
      get_tap $p
      ret=$?
      if [ $ret -ne 0 ];then
        continue
      fi
      echo ""
      echo "## $p"
      echo "tap $p"
      for tp in ${tap_packs[@]};do
        if echo " ${brew_list[@]} "|grep -q " $tp ";then
          opt=$(get_options $tp)
          echo "install ${tp}${opt:+ $opt}"
          brew_list=($(echo " ${brew_list[@]} "|sed "s: $tp : :g"))
        fi
      done
      for tc in ${tap_casks[@]};do
        if echo " ${cask_list[@]} "|grep -q " $tc ";then
          echo "cask install ${tc}"
          cask_list=($(echo " ${cask_list[@]} "|sed "s: $tc : :g"))
        fi
      done
    done
  fi

  if [ ${#brew_list[@]} -gt 0 ];then
    echo ""
    echo "# Other Homebrew packages"
    for p in ${brew_list[@]};do
      opt=$(get_options $p)
      echo "install ${p}${opt:+ $opt}"
    done
  fi
  if [ ${#pip_list[@]} -gt 0 ];then
    echo ""
    echo "# pip packages"
    for p in ${pip_list[@]};do
      echo "pip ${p}"
    done
  fi
  if [ ${#cask_list[@]} -gt 0 ];then
    echo ""
    echo "# Cask Applications"
    for p in ${cask_list[@]};do
      echo "cask install $p"
    done
  fi
  if [ ${#cask_list_nocask[@]} -gt 0 ];then
    echo ""
    echo "# Below application were installed by Cask,"
    echo "# but no cask were found."
    echo ""
    for p in ${cask_list_nocask[@]};do
      echo "# cask install $p"
    done
  fi
  } |tee -a $brewfile
  echo ""
  echo "***********************************************"
  echo "You can edit $brewfile with:"
  echo "    $ $thisname edit"
  echo "***********************************************"

  initialized=1

  return 0
} # }}}

function check_input_file { # Check input file {{{
  if [ ! -f $brewfile ];then
    echo "WARNING: Input file $brewfile is not found."
    ask_yn "WARNING: Do you want to initialize from installed packages?"
    ret=$?
    echo
    if [ $ret -eq 0 ];then
      initialize 0
      return $?
    else
      echo ""
      echo "WARNING: OK, please prepare Brewfile"
      echo "WARNING: or you can initialize $brewfile with:"
      echo "WARNING:     $ $thisname init"
      return 1
    fi
  fi
} # }}}

function edit_brewfile { # Edit file {{{
  $my_editor $brewfile
} # }}}

function cleanup { # Cleanup {{{
  if [ $dryrun -eq 1 ];then
    echo ""
    echo "*******"
    echo "Dry Run"
    echo "*******"
    echo ""
  fi

  # Check packages in the input file
  read_input

  if [ ${#cask_list[@]} -gt 0 ];then
    echo ""
    echo "*********************"
    echo "Cleanup cask packages"
    echo "*********************"
    echo ""
    for p in ${cask_list[@]};do
      if ! echo " ${cask_input[@]} "|grep -q " $p ";then
        echo brew cask uninstall $p
        if [ $dryrun -ne 1 ];then
          check_cask_cmd 1
          brew cask uninstall $p
        fi
        cask_list=($(echo " ${cask_list[@]} "|sed "s: ${p} : :g"))
      fi
    done
    # Skip cask at tap/brew if any cask packages exist
    if [ ${#cask_list[@]} -ne 0 ];then
      tap_list=($(echo " ${tap_list[@]} "|sed "s: ${cask_repo} : :g"))
      brew_list=($(echo " ${brew_list[@]} "|sed "s: ${cask_pack} : :g"))
    fi
  fi

  if [ ${#pip_list[@]} -gt 0 ];then
    echo ""
    echo "*********************"
    echo "Cleanup pip packages"
    echo "*********************"
    echo ""
    for p in ${pip_list[@]};do
      if ! echo " ${pip_input[@]} "|grep -q " $p ";then
        echo brew pip rm $p
        if [ $dryrun -ne 1 ];then
          pip uninstall -y $p >/dev/null
          brew uninstall $p 2>/dev/null
          brew uninstall pip-$p 2>/dev/null
        fi
        pip_list=($(echo " ${pip_list[@]} "|sed "s: ${p} : :g"))
      fi
    done
    # Skip brew-pip at brew if any pip packages exist
    if [ ${#pip_list[@]} -ne 0 ];then
      brew_list=($(echo " ${brew_list[@]} "|sed "s: ${pip_pack} : :g"))
    fi
  fi

  if [ ${#tap_list[@]} -gt 0 ];then
    echo ""
    echo "********************"
    echo "Cleanup tap packages"
    echo "********************"
    echo ""
    for p in ${tap_list[@]};do
      if ! echo " ${tap_input[@]} "|grep -q " $p ";then
        get_tap $p
        untapflag=1
        for tp in ${tap_packs[@]};do
          if echo " ${brew_input[@]} "|grep -q " $tp ";then
            # keep tap as related package is remained
            untapflag=0
            break
          fi
        done
        if [ $untapflag -eq 0 ];then
          continue
        fi
        echo brew untap $p
        if [ $dryrun -ne 1 ];then
          brew untap $p
        fi
      fi
    done
  fi

  if [ ${#brew_list[@]} -gt 0 ];then
    echo ""
    echo "*********************"
    echo "Cleanup brew packages"
    echo "*********************"
    echo ""
    for p in ${brew_list[@]};do
      if ! echo " ${brew_input[@]} "|grep -q " $p ";then
        echo brew uninstall $p
        if [ $dryrun -ne 1 ];then
          app=$(basename $(brew info ${p% *}|grep "ln -s"|awk '{print $3}') 2>/dev/null)
          if [ "$app" != "" ];then
            rm -f /Applications/$app
            rm -f /Applications/Utilities/$app
            rm -f ~/Applications/$app
          fi
          brew uninstall $p
        fi
      fi
    done
  fi

  echo ""
  echo "*********************"
  echo "Cleanup cache        "
  echo "*********************"
  echo ""
  echo brew cleanup --force
  echo rm -rf $cache_dir
  if [ $dryrun -ne 1 ];then
    brew cleanup --force
    rm -rf $cache_dir
  else
    echo "*****************************************"
    echo "This is dry run."
    echo "If you want to enforce cleanup, use '-C':"
    echo "    $ $thisname clean -C"
    echo "*****************************************"
  fi

  return 0
} # }}}

function install { # Install {{{
  # First update Homebrew
  if [ $noupdate -ne 1 ];then
    brew update
  fi

  # Check packages in the input file
  read_input

  # Tap
  for p in ${tap_input[@]};do
    if ! echo " ${tap_list[@]} "|grep -q " $p ";then
      echo brew tap $p
      brew tap $p
    fi
  done

  # Cask
  if [ $is_cask_cmd -eq 1 ];then
    for p in ${cask_input[@]};do
      if ! echo " ${cask_list[@]} "|grep -q " $p ";then
        check_cask_cmd 1
        echo brew cask install $p
        brew cask install $p
      fi
    done
  fi

  # pip
  for p in ${pip_input[@]};do
    if ! echo " ${pip_list[@]} "|grep -q " $p ";then
      check_pip_cmd 1
      echo brew pip $p
      brew pip $p
    fi
  done

  # Brew
  for p in "${brew_input_opt[@]}";do
    if ! echo " ${brew_list[@]} "|grep -q " ${p%% *} ";then
      echo brew install $p
      brew install $p | tee .brewall_install_log
      linkcmd=$(grep "ln -s" .brewall_install_log)
      if [ "$linkcmd" != "" ];then
        if [ "$link" -eq 1 ];then
          $linkcmd
        fi
      fi
      rm -f .brewall_install_log
    fi
  done

  # Other commands
  if [ ${#cmd_input[@]} -ne 0 ];then
    for c in "${#cmd_input[@]}";do
      $c
    done
  fi

  return 0
} # }}}

function find_app { # Helper function for Cask# {{{
  check_cask_cmd 1
  app="$1"
  is_cask=0
  is_installed=0
  file=$($(brew --prefix)/Library/Taps/caskroom/homebrew-cask/developer/bin/cask_namer "$app" 2>/dev/null|grep "Proposed file name"|awk '{print $4}')
  for c in "${othercaskdirs[@]}" "$caskdir";do
    if [ -f $c/$file ];then
      is_cask=1
      notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
      if [ "$notinstalled" = "" ];then
        is_installed=1
        break
      fi
    else
      for ftmp in $(grep "'$(basename "$app")'" $c/*.rb|cut -d: -f1);do
        ftmp=$(basename "$ftmp")
        if [ "$ftmp" != "" ];then
          is_cask=1
          file=$ftmp
          notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
          if [ "$notinstalled" = "" ];then
            is_installed=1
            break
          fi
        fi
      done
      if [ $is_installed -eq 1 ];then
        break
      fi
    fi
  done
}

# }}}

function check_cask { # Check applications for Cask # {{{
  check_cask_cmd 1
  echo "Starting to check applications for Cask..."
  caskdir=$(brew info  brew-cask|grep "$(brew --cellar brew-cask)"|cut -d" " -f1)/Casks
  if [ "$caskdir" = "/Casks" ];then
    echo "You may not have installed cask"
    echo "Please check and install cask first"
    return 1
  fi
  echo "OK, cask was installed!"
  echo ""
  othercaskdirs=()
  for dir in $(brew --prefix)/Library/Taps/*/*/Casks;do
    if [ "$dir" !=  "$(brew --prefix)/Library/Taps/caskroom/homebrew-cask/Casks" ];then
      othercaskdirs=("${othercaskdirs[@]}" "$dir")
    fi
  done
  orig_ifs=$IFS
  IFS=$'\n'
  apps_root=($(ls -d /Applications/*app))
  apps_utils=($(ls -d /Applications/Utilities/*app))
  apps_home=($(ls -d ~/Applications/*app))
  IFS=$orig_ifs

  apps_root_cask_installed=()
  apps_root_cask_installed_caskname=()
  apps_root_cask_notinstalled=()
  apps_root_cask_notinstalled_caskname=()
  apps_root_noncask=()
  for a in "${apps_root[@]}";do
    find_app "$a"
    if [ $is_cask -eq 0 ];then
      apps_root_noncask=("${apps_root_noncask[@]}" "$a")
      echo "Non Cask app: $a"
    else
      notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
      if [ $is_installed -eq 1 ];then
        echo "Installed by Cask: $file, $a"
        apps_root_cask_installed=("${apps_root_cask_installed[@]}" "$a")
        apps_root_cask_installed_caskname=("${apps_root_cask_installed_caskname[@]}" "${file%.rb}")
      else
        echo "Not installed by Cask: $file, $a"
        apps_root_cask_notinstalled=("${apps_root_cask_notinstalled[@]}" "$a")
        apps_root_cask_notinstalled_caskname=("${apps_root_cask_notinstalled_caskname[@]}" "${file%.rb}")
      fi
    fi
  done

  apps_utils_cask_installed=()
  apps_utils_cask_installed_caskname=()
  apps_utils_cask_notinstalled=()
  apps_utils_cask_notinstalled_caskname=()
  apps_utils_noncask=()
  for a in "${apps_utils[@]}";do
    find_app "$a"
    if [ $is_cask -eq 0 ];then
      apps_utils_noncask=("${apps_utils_noncask[@]}" "$a")
      echo "Non Cask app: $a"
    else
      notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
      if [ $is_installed -eq 1 ];then
        echo "Installed by Cask: $file, $a"
        apps_utils_cask_installed=("${apps_utils_cask_installed[@]}" "$a")
        apps_utils_cask_installed_caskname=("${apps_utils_cask_installed_caskname[@]}" "${file%.rb}")
      else
        echo "Not installed by Cask: $file, $a"
        apps_utils_cask_notinstalled=("${apps_utils_cask_notinstalled[@]}" "$a")
        apps_utils_cask_notinstalled_caskname=("${apps_utils_cask_notinstalled_caskname[@]}" "${file%.rb}")
      fi
    fi
  done

  apps_home_cask_installed=()
  apps_home_cask_installed_caskname=()
  apps_home_cask_notinstalled=()
  apps_home_cask_notinstalled_caskname=()
  apps_home_noncask=()
  for a in "${apps_home[@]}";do
    find_app "$a"
    if [ $is_cask -eq 0 ];then
      apps_home_noncask=("${apps_home_noncask[@]}" "$a")
    else
      if [ $is_installed -eq 1 ];then
        echo "Installed by Cask: $file, ${a/$HOME/~}"
        apps_home_cask_installed=("${apps_home_cask_installed[@]}" "$a")
        apps_home_cask_installed_caskname=("${apps_home_cask_installed_caskname[@]}" "${file#.rb}")
      else
        echo "Not installed by Cask: $file, ${a/$HOME/~}"
        apps_home_cask_notinstalled=("${apps_home_cask_notinstalled[@]}" "$a")
        apps_home_cask_notinstalled_caskname=("${apps_home_cask_notinstalled_caskname[@]}" "${file%.rb}")
      fi
    fi
  done

  {
    echo "### Cask applications"
    echo "### Please copy these lines to your Brewfile and use with \`brew bundle\`."
    echo ""
    echo "### tap and install Cask (remove comment if necessary)."
    echo "#tap caskroom/cask"
    echo "#install brew-cask"
    echo ""
    echo "### Apps installed by Cask in /Applications:"
    i=0
    while [ $i -lt ${#apps_root_cask_installed[@]} ];do
      echo "cask install ${apps_root_cask_installed_caskname[$i]} # ${apps_root_cask_installed[$i]}"
      ((i++))
    done
    echo ""
    echo "### Apps installed by Cask in /Applications/Utilities:"
    i=0
    while [ $i -lt ${#apps_utils_cask_installed[@]} ];do
      echo "cask install ${apps_utils_cask_installed_caskname[$i]} # ${apps_utils_cask_installed[$i]}"
      ((i++))
    done
    echo ""
    echo "### Apps installed by Cask in ~/Applications:"
    i=0
    while [ $i -lt ${#apps_home_cask_installed[@]} ];do
      echo "cask install ${apps_home_cask_installed_caskname[$i]} # ${apps_home_cask_installed[$i]/$HOME/~}"
      ((i++))
    done
    echo ""
    echo "#############################"
    echo ""
    echo "### Apps not installed by Cask, but installed in /Applications:"
    echo "### If you want to install them with Cask, remove comments."
    i=0
    while [ $i -lt ${#apps_root_cask_notinstalled[@]} ];do
      echo "#cask install ${apps_root_cask_notinstalled_caskname[$i]} # ${apps_root_cask_notinstalled[$i]}"
      ((i++))
    done
    echo ""
    echo "### Apps not installed by Cask, but installed in /Applications/Utilities:"
    echo "### If you want to install them with Cask, remove comments."
    i=0
    while [ $i -lt ${#apps_utils_cask_notinstalled[@]} ];do
      echo "#cask install ${apps_utils_cask_notinstalled_caskname[$i]} # ${apps_utils_cask_notinstalled[$i]}"
      ((i++))
    done
    echo ""
    echo "### Apps not installed by Cask, but installed in ~/Applications:"
    echo "### If you want to install them with Cask, remove comments."
    i=0
    while [ $i -lt ${#apps_home_cask_notinstalled[@]} ];do
      echo "#cask install ${apps_home_cask_notinstalled_caskname[$i]} # ${apps_home_cask_notinstalled[$i]/$HOME/~}"
      ((i++))
    done
    echo ""
    echo ""
    echo "#############################"
    echo ""
    echo "### Apps not registered in Cask, but installed in /Applications:"
    for a in "${apps_root_noncask[@]}";do
      echo "# $a"
    done
    echo ""
    echo "### Apps not registered in Cask, but installed in /Applications/Utilities:"
    for a in "${apps_utils_noncask[@]}";do
      echo "# $a"
    done
    echo ""
    echo "### Apps not registered in Cask, but installed in ~/Applications:"
    for a in "${apps_home_noncask[@]/$HOME/~}";do
      echo "# $a"
    done
  } > Caskfile.txt
  #} |tee Caskfile.txt

  echo ""
  echo ""
  echo "### Summary ###"
  echo ""
  echo "Total: $((${#apps_root[@]} + ${#apps_utils[@]} + ${#apps_home[@]})) Apps have been checked."
  echo "       (Apps of /Applications/*.app, /Applications/Utilities/*.app and ~/Applications/*.app)"
  echo ""
  echo "Installed by Cask:"
  echo "- /Applications           : ${#apps_root_cask_installed[@]} Apps"
  echo "- /Applications/Utilities : ${#apps_utils_cask_installed[@]} Apps"
  echo "- ~/Applications          : ${#apps_home_cask_installed[@]} Apps"
  echo ""
  echo "Not installed by Cask, but can be installed by Cask:"
  echo "- /Applications           : ${#apps_root_cask_notinstalled[@]} Apps"
  echo "- /Applications/Utilities : ${#apps_utils_cask_notinstalled[@]} Apps"
  echo "- ~/Applications          : ${#apps_home_cask_notinstalled[@]} Apps"
  echo ""
  echo "No Cask Apps:"
  echo "- /Applications           : ${#apps_root_noncask[@]} Apps"
  echo "- /Applications/Utilities : ${#apps_utils_noncask[@]} Apps"
  echo "- ~/Applications          : ${#apps_home_noncask[@]} Apps"
  echo ""

} # }}}

function cask_upgrade { # Upgrade cask applications # {{{
  check_cask_cmd 0
  ret=$?
  if [ $ret -ne 0 ];then
    echo "Homebrew-cask has not been installed, yet."
    return $ret
  fi
  apps=($(brew cask list))
  for a in ${apps[@]};do
    info=$(brew cask info $a)
    if echo "$info"| grep -q "Not installed";then
      brw cask install $a
    fi
    if [ $dryrun -eq 0 ];then
      current=$(echo "$info"|grep "${caskroom}/${a}"|cut -d' ' -f1)
      for dir in $(ls ${caskroom}/${a});do
        testdir="${caskroom}/${a}/${dir}"
        if [ "$testdir" != "$current" ];then
          echo rm -rf "$testdir"
          rm -rf "$testdir"
        fi
      done
    fi
  done
} # }}}

# }}}

# Main {{{

# Check Homebrew

if ! which brew >& /dev/null;then
  echo Homebrew is not installed!
  echo Install now...
  echo ruby -e \"\$\(curl -fsSL https://raw.github.com/mxcl/homebrew/go\)\"
  ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
  brew doctor
  if [ $? -ne 0 ];then
    echo
    echo "#################################"
    echo "#################################"
    echo "Check brew environment:"
    echo "    $ brew doctor"
    echo
    echo "Check later, anyway, let's continue..."
    echo "#################################"
    echo "#################################"
    echo
    echo
  fi
fi

# Cask list check
if [ $casklist -eq 1 ];then
  check_cask
  exit $?
fi

# Upgrade cask applications
if [ $cask_upgrade -eq 1 ];then
  cask_upgrade
  exit $?
fi

# Set BREWFILE repository
if [ $set_repo -eq 1 ];then
  set_brewfile_repo
  exit $?
fi

# Change brewfile if it is repository's one.
check_repo

# Do pull/push for the repository.
if [ $pull -eq 1 ] || [ $push -eq 1 ];then
  repomgr
fi

# brew command
if [ $brew -eq 1 ];then
  echo brew $brew_args
  brew $brew_args
  ret=$?
  if [ $ret -ne 0 ];then
    exit $ret
  fi
  if [ $noinit -eq 0 ];then
    initialize 0
  fi
  exit $?
fi

# Initialize
if [ $init -eq 1 ];then
  initialize
  exit $?
fi

# Check input file
# If the file doesn't exist, initialize it.
check_input_file
ret=$?
if [ $edit -ne 1 ] && [ $ret -ne 0 ];then
  exit $ret
fi

# Edit
if [ $edit -eq 1 ];then
  edit_brewfile
  exit 0
fi

# Get list for cleanup/install
get_list

# Cleanup
if [ $cleanup -eq 1 ];then
  cleanup
  exit $?
fi

# Install
if [ $install -eq 1 ];then
  install
  exit $?
fi

# Update
if [ $update -eq 1 ];then
  if [ "$repo" != "" ];then
    repomgr pull
  fi
  install
  brew upgrade
  initialize 0
  if [ "$repo" != "" ];then
    repomgr push
    dryrun=0
    cleanup
  fi
  exit 0
fi
# }}}
