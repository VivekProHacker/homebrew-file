#!/bin/bash

#############################################
# Brewall: Manager for packages of Homebrew
# https://github.com/rcmdnk/homebrew-brewall
version=0.0.9
#############################################

#The MIT License (MIT) {{{
#
#Copyright (c) 2013 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# }}}

# Variables {{{
input=${HOMEBREW_BREWFILE:-"/usr/local/Library/Brewfile"}
brewfile="$input"
repo=""
brewall_inst=0
brew=0
link=1
cleanup=0
dryrun=1
init=0
edit=0
set_repo=0
pull=0
push=0
update=0
casklist=0
tap_dir="/usr/local/Library/Taps"
if [ -d ~/Library/Caches/Homebrew ];then
  cache_dir=${HOMEBREW_CACHE:-"~/Library/Caches/Homebrew"}
else
  cache_dir=${HOMEBREW_CACHE:-"/Library/Caches/Homebrew"}
fi
cask_pack="brew-cask"
cask_repo="phinze/cask"
my_editor=${EDITOR:-"vim"}

# }}}

# Help {{{
HELP="Usage: $0 [-increvh][-f <input file>] command ...

Commands:
  brewall install            : Install packages in BREWFILE (do 'brew update', too).
  brewall brew [command ...] : Execute brew command, and update BREWFILE.
  brewall init     (or -i)   : Initialize/Update BREWFILE with installed packages.
  brewall set_repo (or -s)   : Set BREWFILE repository.
  brewall pull               : Update BREWFILE from the repository.
  brewall push               : Push your BREWFILE to the repository.
  brewall clean    (or -c)   : Clenup
                               Uninstall packages not in the list.
                               Untap packages not in the list.
                               Cleanup cache (brew cleanup)
                               By drault, cleanup runs as dry-run.
                               If you want to enforce cleanup, use '-C' option.
  brewall update   (or -u)   : Do pull, install, brew upgrade, push and clean -C.
                               pull, push and clean are done only if
                               the repository is assigned.
  brewall edit     (or -e)   : Edit input file.
  brewall casklist           : Check applications for Cask
  brewall version  (or -v)   : Show version.
  brewall help     (or -h)   : Print Help (this message) and exit.

Options:
      -f  <file> Set input file (current default: ${input})
                 You can set input file by environmental variable,
                 HOMEBREW_BREWFILE, like:
                      export HOMEBREW_BREWFILE=~/.brewfile
      -n         Don't make links for Apps
      -C         Run cleanup in non dry-run mode.
      -r  <repo> Set repository name. Use with set_repo (-s).

If you want to use repository's BREWFILE,
please prepare a repository which has a file named 'Brewfile'.
If you assign the repository which doesn't have 'Brewfile',
then brewall will try to make 'Brewfile' in the repository.
For GitHub repository, you can shorten the address like user_name/repo_name.

"
# }}}

# Check arguments {{{
ncommands=0
while [ $# != 0 ] ; do
  case $1 in
    -f )
      input=$2; shift;
      ;;
    install)
      brewall_inst=1; : $((ncommands++));
      ;;
    brew)
      brew=1; shift; brew_args="$@"; : $((ncommands++)); break;
      ;;
    -i|init)
      init=1; : $((ncommands++));
      ;;
    -s|set_repo)
      set_repo=1; : $((ncommands++));
      ;;
    -r )
      repo=$2; shift;
      ;;
    pull)
      pull=1; : $((ncommands++));
      ;;
    push)
      push=1; : $((ncommands++));
      ;;
    -n)
      link=0;
      ;;
    -c|clean)
      cleanup=1; : $((ncommands++));
      ;;
    -u|update)
      update=1; : $((ncommands++));
      ;;
    -C)
      dryrun=0;
      ;;
    -e|edit)
      edit=1; : $((ncommands++));
      ;;
    casklist)
      casklist=1; : $((ncommands++));
      ;;
    -v|version)
      echo "brewall v$version";exit 0;
      ;;
    -h|help)
      echo "$HELP" 1>&2; exit 0;
      ;;
    *)
      echo $1: unknown option; echo; echo "$HELP" 1>&2; exit 1;
  esac
  shift
done

if [ $ncommands -eq 0 ];then
  echo "$HELP" 1>&1; exit 0;
elif [ $ncommands -ne 1 ];then
  echo "More than 1 commands are given!";echo;
  echo "$HELP" 1>&1; exit 1;
fi
# }}}

# Function {{{

# Helper for yes/no {{{
function ask_yn {
  question="$1"
  printf "$1 [y/n]: "
  read yn
  while [ 1 ];do
    case $yn in
      "y"|"Y"|"yes"|"Yes"|"YES" )
        return 0
        ;;
      "n"|"N"|"no"|"No"|"NO" )
        return 1
        ;;
      * )
        printf "Answer with yes (y) or no (n): "
        read yn
        continue
        ;;
    esac
  done
} # }}}

# Helper to build brewfile path for the repository {{{
function repo_file {
  repo_name=$(basename ${repo%.git})
  user_name=$(echo $(basename $(dirname $repo))|awk '{n=split($1,tmp,":")}{print tmp[n]}')
  inputdir=$(dirname $input)
  echo $inputdir/${user_name}_${repo_name}/Brewfile
} # }}}

# Helper check repository file {{{
function check_repo {
  if [ ! -f $input ];then
    return 0
  fi
  if ! grep -q "^ *git" $input;then
    return 0
  fi
  repo=$(grep "^ *git" $input |awk '{print $2}')
  if [ "$repo" = "" ];then
    return 0
  fi
  if [[ ! $repo =~ ^git@ &&  ! $repo =~ ^http ]];then
    repo=git@github.com:$repo
  fi
  brewfile=$(repo_file)
  if [ ! -d $(dirname $brewfile) ];then
    git clone $repo $(dirname $brewfile)
    if [ $? -ne 0 ];then
      echo "Can't clone $repo."
      echo "Please check the repository, or reset by"
      echo "    $ $0 set_repo"
      exit 1
    fi
  fi
} # }}}

# Helper repository management {{{
function repomgr {
  local l_pull=$pull
  local l_push=$push
  if [ "$1" = "pull" ];then
    l_pull=1
    l_push=0
  elif [ "$1" = "push" ];then
    l_pull=0
    l_push=1
  fi
  if [ "$repo" = "" ];then
    echo "Please set the repository, or reset by"
    echo "    $ $0 set_repo"
    return 1
  fi
  if [ ! -d $(dirname $brewfile) ];then
    git clone $repo $(dirname $brewfile)
  fi
  cd $(dirname $brewfile)
  if [ $l_pull -eq 1 ];then
    git pull
    return 0
  elif [ $l_push -eq 1 ];then
    git add Brewfile
    git commit -m "Updated the Package List"
    git push
    return 0
  fi
} # }}}


# Helper for tap configuration file {{{
function get_tap {
  tap_user=`dirname $1`
  tap_repo=`basename $1`
  formulae=`ls ${tap_dir}/${tap_user}/homebrew-${tap_repo}/*rb 2>/dev/null`
  if [ "$formulae" = "" ];then
    formulae=`ls ${tap_dir}/${tap_user}/homebrew-${tap_repo}/Formula/*rb 2>/dev/null`
  fi
  tap_packs=()
  #echo \$1=$1
  #echo tap_user=$tap_user
  #echo tap_repo=$tap_repo
  #echo formulae=$formulae
  for f in ${formulae[@]};do
    tap_packs=(${tap_packs[@]} $(basename ${f%.rb}))
  done
  # Note: Some repositories, such caskroom/homebrew-cask, don't have any formulae.
  #if [ ${#tap_packs[@]} -eq 0 ];then
  #  echo ""
  #  echo "WARNING: No formula is found in $tap_dir/${user}-${repo}, you might have already untap $1"
  #  echo "WARNING: or $1 doesn't have any formula."
  #  echo ""
  #fi
  return 0
} # }}}

# Get list {{{
function get_list {
  brew_list=(`brew list`)
  tap_list=(`brew tap`)
  cask_list=(`brew cask list 2>/dev/null`)
} # }}}

# Read input file {{{
function read_input {
  # Check packages in the input file
  cmd_input=()
  cask_input=()
  tap_input=()
  brew_input=()
  brew_input_opt=()
  while read line;do
    # Skip empty line/comment line
    line=${line%%#*}
    if [ "$line" = "" ];then
      continue
    fi
    # Get arguments
    args=(${line})
    cmd=${args[0]}
    p=`echo ${args[1]}|sed s:\'::g|sed s:\"::g`
    opt=`echo ${args[@]: 2}|sed s:\'::g|sed s:\"::g`
    if [ "$cmd" = "brew" -o "$cmd" = "install" ];then
      brew_input=(${brew_input[@]} $p)
      brew_input_opt=("${brew_input_opt[@]}" "$p $opt")
    elif [ "$cmd" = "tap" ];then
      tap_input=(${tap_input[@]} $p)
    elif [ "$cmd" = "tapall" ];then
      tap_input=(${tap_input[@]} $p)
      get_tap $p
      ret=$?
      if [ $ret -ne 0 ];then
        continue
      fi
      brew_input=(${brew_input[@]} $tap_packs)
    elif [ "$cmd" = "cask" ];then
      if [ "$p" = "install" ];then
        p="$opt"
      fi
      cask_input=(${cask_input[@]} $p)
    else
      #echo "WARNING: $cmd is unknown, please check $brewfile"
      #continue
      brew_cmd=(${cmd_input[@]} $p)
    fi
  done < $brewfile
} # }}}

# Set Brewfile Repository {{{
function set_brewfile_repo {

  # Check input file
  if [ -f $input ];then
    if grep -q "^ *git" $input;then
      prev_repo=$(grep "^ *git" $input |awk '{print $2}')
    fi
    echo "$input is already there."
    if [ "$prev_repo" != "" ];then
      echo "Git repository for Brewfile is already set as $prev_repo."
    fi
    ask_yn "Do you want to overwrite it?"
    ret=$?
    if [ $ret -eq 0 ];then
      mv ${input} ${input}.bak
      echo "ok, old $input was moved to ${input}.bak"
    else
      return 1
    fi
  fi
  rm -f ${input}

  # Get repository
  if [ "$repo" = "" ];then
    echo 'Set repository, "non" to use local Brewfile'
    echo -n ': '
    read repo
    while [ "$repo" = "" ];do
      echo -n "Repository can't be empty."
      echo 'Set repository, "non" to use local Brewfile'
      echo -n ': '
      read repo
    done
  fi
  echo ""
  echo "***********************************************"
  echo "Set Brewfile Repository as $repo"
  echo "***********************************************"
  echo ""

  # Reset to no repository type Brewfile
  if [ "$repo" = "non" ];then
    initialize 0
    return $?
  fi

  # Set repository to input file
  echo "git $repo" > $input
  check_repo
  return $?
} # }}}

# Initialize Brewfile {{{
function initialize {
  if [ -f $input ] && [ "$1" != "0" ];then
    if [ "$repo" != "" ];then
      echo "You are using Brewfile of $repo."
    else
      echo "$input is already there."
    fi
    ask_yn "Do you want to overwrite it?"
    ret=$?
    if [ $ret -eq 0 ];then
      if [ "$repo" = "" ];then
        mv ${input} ${input}.bak
        echo "ok, old $input was moved to ${input}.bak"
      fi
    else
      return 1
    fi
  fi
  rm -f ${brewfile}
  echo ""
  echo "***********************************************"
  echo "Initialize $brewfile"
  echo "***********************************************"
  echo ""

  # Get installed package list
  get_list

  # Check list
  echo "# Tap repositories and their packages" |tee -a $brewfile
  for p in ${tap_list[@]};do
    get_tap $p
    ret=$?
    if [ $ret -ne 0 ];then
      continue
    fi
    echo "tap $p" |tee -a $brewfile
    for tp in ${tap_packs[@]};do
      if echo " ${brew_list[@]} "|grep -q " $tp ";then
        opt=`brew info $tp|grep "Built from source with"|cut -d: -f2`
        echo "brew ${tp}${opt}" |tee -a $brewfile
        brew_list=(`echo " ${brew_list[@]} "|sed "s: $tp : :g"`)
      fi
    done
    echo "" |tee -a $brewfile
  done

  echo "" |tee -a $brewfile
  echo "# Cask packages" |tee -a $brewfile
  for p in ${cask_list[@]};do
    echo "cask install $p" |tee -a $brewfile
  done
  echo "" |tee -a $brewfile
  echo "# Other Homebrew packages" |tee -a $brewfile
  for p in ${brew_list[@]};do
    opt=`brew info $p|grep "Built from source with"|tail -n1|cut -d: -f2`
    echo "install ${p}${opt}" |tee -a $brewfile
  done
  echo ""
  echo "***********************************************"
  echo "You can edit $brewfile with:"
  echo "    $0 edit"
  echo "***********************************************"
  return 0
} # }}}

# Check input file {{{
function check_input_file {
  if [ ! -f $brewfile ];then
    echo "WARNING: Input file $brewfile is not found."
    ask_yn "WARNING: Do you want to initialize from installed packages?"
    ret=$?
    if [ $ret -eq 0 ];then
      initialize
      return $?
    else
      echo ""
      echo "WARNING: OK, please prepare Brewfile"
      echo "WARNING: or you can initialize $brewfile with:"
      echo "WARNING:     $ $0 init"
      return 1
    fi
  fi
} # }}}

# Edit file {{{
function edit_brewfile {
  $my_editor $brewfile
} # }}}

# Cleanup {{{
function cleanup {
  if [ $dryrun -eq 1 ];then
    echo ""
    echo "*******"
    echo "Dry Run"
    echo "*******"
    echo ""
  fi

  # Check packages in the input file
  read_input

  echo ""
  echo "*********************"
  echo "Cleanup cask packages"
  echo "*********************"
  echo ""
  for p in ${cask_list[@]};do
    if ! echo " ${cask_input[@]} "|grep -q " $p ";then
      echo brew cask uninstall $p
      if [ $dryrun -ne 1 ];then
        brew cask uninstall $p
      fi
      cask_list=(`echo " ${cask_list[@]} "|sed "s: ${p} : :g"`)
    fi
  done
  # Skip cask at tap/brew if any cask packages exist
  if [ ${#cask_list[@]} -ne 0 ];then
    tap_list=(`echo " ${tap_list[@]} "|sed "s: ${cask_repo} : :g"`)
    brew_list=(`echo " ${brew_list[@]} "|sed "s: ${cask_pack} : :g"`)
  fi

  echo ""
  echo "********************"
  echo "Cleanup tap packages"
  echo "********************"
  echo ""
  for p in ${tap_list[@]};do
    if ! echo " ${tap_input[@]} "|grep -q " $p ";then
      get_tap $p
      untapflag=1
      for tp in ${tap_packs[@]};do
        if echo " ${brew_input[@]} "|grep -q " $tp ";then
          # keep tap as related package is remained
          untapflag=0
          break
        fi
      done
      if [ $untapflag -eq 0 ];then
        continue
      fi
      echo brew untap $p
      if [ $dryrun -ne 1 ];then
        brew untap $p
      fi
    fi
  done

  echo ""
  echo "*********************"
  echo "Cleanup brew packages"
  echo "*********************"
  echo ""
  for p in ${brew_list[@]};do
    if ! echo " ${brew_input[@]} "|grep -q " $p ";then
      echo brew uninstall $p
      if [ $dryrun -ne 1 ];then
        app=$(basename $(brew info ${p% *}|grep "ln -s"|awk '{print $3}') 2>/dev/null)
        if [ "$app" != "" ];then
          rm -f /Applications/$app
          rm -f ~/Applications/$app
        fi
        brew uninstall $p
      fi
    fi
  done

  echo ""
  echo "*********************"
  echo "Cleanup cache        "
  echo "*********************"
  echo ""
  echo brew cleanup --force
  echo rm -rf $cache_dir
  if [ $dryrun -ne 1 ];then
    brew cleanup --force
    rm -rf $cache_dir
  else
    echo "*****************************************"
    echo "This is dry run."
    echo "If you want to enforce cleanup, use '-C':"
    echo "    $ $0 clean -C"
    echo "*****************************************"
  fi

  return 0
} # }}}

# Install {{{
function install {
  # First update Homebrew
  brew update

  # Check packages in the input file
  read_input

  # Flag for cask
  if brew list|grep -q "${cask_pack}";then
    cask_installed=1
  else
    cask_installed=0
  fi

  # Tap
  for p in ${tap_input[@]};do
    if ! echo " ${tap_list[@]} "|grep -q " $p ";then
      echo brew tap $p
      brew tap $p
    fi
  done

  # Cask
  for p in ${cask_input[@]};do
    if ! echo " ${cask_list[@]} "|grep -q " $p ";then
      if [ $cask_installed -eq 0 ];then
        echo "cask has not been installed, install now."
        echo brew tap ${cask_repo}
        brew tap ${cask_repo}
        tap_list=(${tap_list[@]} ${cask_repo})
        get_tap ${cask_repo}
        if ! echo " ${tap_packs[@]} "|grep -q " ${cask_pack} ";then
          echo "WARNING: ${cask_pack} was not in ${cask_repo}."
          echo "WARNING: Maybe you need to modify cask_repo."
          continue
        fi
        echo brew install ${cask_pack}
        brew install ${cask_pack}
        brew_list=(${brew_list[@]} ${cask_pack})
        cask_installed=1
      fi
      echo brew cask install $p
      brew cask install $p
    fi
  done

  # Brew
  for p in "${brew_input_opt[@]}";do
    if ! echo " ${brew_list[@]} "|grep -q " ${p% *} ";then
      echo brew install $p
      brew install $p | tee .brewall_install_log
      linkcmd=`grep "ln -s" .brewall_install_log`
      if [ "$linkcmd" != "" ];then
        if [ "$link" -eq 1 ];then
          $linkcmd
        fi
      fi
      rm -f .brewall_install_log
    fi
  done

  echo "brewall install does automatically 'brew update'"
  if [ ${#cmd_input[@]} -ne 0 ];then
    echo "Following commands have not been executed."
    for c in "${#cmd_input[@]}";do
      echo "$c"
    done
  fi

  return 0
} # }}}

# Helper function for Cask# {{{
function find_app {
  app="$1"
  is_cask=0
  is_installed=0
  file=$($(brew --repository)/Library/Taps/caskroom/homebrew-cask/developer/bin/cask_namer "$app" 2>/dev/null|grep "Proposed file name"|awk '{print $4}')
  for c in "${othercaskdirs[@]}" "$caskdir";do
    if [ -f $c/$file ];then
      is_cask=1
      notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
      if [ "$notinstalled" = "" ];then
        is_installed=1
        break
      fi
    else
      for ftmp in $(grep "'$(basename "$app")'" $c/*.rb|cut -d: -f1);do
        ftmp=$(basename "$ftmp")
        if [ "$ftmp" != "" ];then
          is_cask=1
          file=$ftmp
          notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
          if [ "$notinstalled" = "" ];then
            is_installed=1
            break
          fi
        fi
      done
      if [ $is_installed -eq 1 ];then
        break
      fi
    fi
  done
}

# }}}
# Check applications for Cask # {{{
function check_cask {
  echo "Starting to check applications for Cask..."
  caskdir=$(brew info  brew-cask|grep "/usr/local/Cellar/brew-cask"|cut -d" " -f1)/Casks
  if [ "$caskdir" = "/Casks" ];then
    echo "You may not have installed cask"
    echo "Please check and install cask first"
    return 1
  fi
  echo "OK, cask was installed!"
  echo ""
  othercaskdirs=()
  for dir in $(brew --repository)/Library/Taps/*/*/Casks;do
    if [ "$dir" !=  "$(brew --repository)/Library/Taps/caskroom/homebrew-cask/Casks" ];then
      othercaskdirs=("${othercaskdirs[@]}" "$dir")
    fi
  done
  orig_ifs=$IFS
  IFS=$'\n'
  apps_root=($(ls -d /Applications/*app))
  apps_home=($(ls -d ~/Applications/*app))
  IFS=$orig_ifs

  apps_root_cask_installed=()
  apps_root_cask_installed_caskname=()
  apps_root_cask_notinstalled=()
  apps_root_cask_notinstalled_caskname=()
  apps_root_noncask=()
  for a in "${apps_root[@]}";do
    find_app "$a"
    if [ $is_cask -eq 0 ];then
      apps_root_noncask=("${apps_root_noncask[@]}" "$a")
      echo "Non Cask app: $a"
    else
      notinstalled=$(brew cask info ${file%.rb}|grep "Not installed")
      if [ $is_installed -eq 1 ];then
        echo "Installed by Cask: $file, $a"
        apps_root_cask_installed=("${apps_root_cask_installed[@]}" "$a")
        apps_root_cask_installed_caskname=("${apps_root_cask_installed_caskname[@]}" "${file%.rb}")
      else
        echo "Not installed by Cask: $file, $a"
        apps_root_cask_notinstalled=("${apps_root_cask_notinstalled[@]}" "$a")
        apps_root_cask_notinstalled_caskname=("${apps_root_cask_notinstalled_caskname[@]}" "${file%.rb}")
      fi
    fi
  done

  apps_home_cask_installed=()
  apps_home_cask_installed_caskname=()
  apps_home_cask_notinstalled=()
  apps_home_cask_notinstalled_caskname=()
  apps_home_noncask=()
  for a in "${apps_home[@]}";do
    find_app "$a"
    if [ $is_cask -eq 0 ];then
      apps_home_noncask=("${apps_home_noncask[@]}" "$a")
    else
      if [ $is_installed -eq 1 ];then
        echo "Installed by Cask: $file, ${a/$HOME/~}"
        apps_home_cask_installed=("${apps_home_cask_installed[@]}" "$a")
        apps_home_cask_installed_caskname=("${apps_home_cask_installed_caskname[@]}" "${file#.rb}")
      else
        echo "Not installed by Cask: $file, ${a/$HOME/~}"
        apps_home_cask_notinstalled=("${apps_home_cask_notinstalled[@]}" "$a")
        apps_home_cask_notinstalled_caskname=("${apps_home_cask_notinstalled_caskname[@]}" "${file%.rb}")
      fi
    fi
  done

  {
    echo "### Cask applications"
    echo "### Please copy these lines to your Brewfile and use with \`brew bundle\`."
    echo ""
    echo "### tap and install Cask (remove comment if necessary)."
    echo "#tap caskroom/cask"
    echo "#install brew-cask"
    echo ""
    echo "### Apps installed by Cask in /Applications"
    i=0
    while [ $i -lt ${#apps_root_cask_installed[@]} ];do
      echo "cask install ${apps_root_cask_installed_caskname[$i]} # ${apps_root_cask_installed[$i]}"
      ((i++))
    done
    echo ""
    echo "### Apps installed by Cask in ~/Applications."
    i=0
    while [ $i -lt ${#apps_home_cask_installed[@]} ];do
      echo "cask install ${apps_home_cask_installed_caskname[$i]} # ${apps_home_cask_installed[$i]/$HOME/~}"
      ((i++))
    done
    echo ""
    echo "#############################"
    echo ""
    echo "### Apps not installed by Cask, but installed in /Applications."
    echo "### If you want to install them with Cask, remove comments."
    i=0
    while [ $i -lt ${#apps_root_cask_notinstalled[@]} ];do
      echo "#cask install ${apps_root_cask_notinstalled_caskname[$i]} # ${apps_root_cask_notinstalled[$i]}"
      ((i++))
    done
    echo ""
    echo "### Apps not installed by Cask, but installed in ~/Applications."
    echo "### If you want to install them with Cask, remove comments."
    i=0
    while [ $i -lt ${#apps_home_cask_notinstalled[@]} ];do
      echo "#cask install ${apps_home_cask_notinstalled_caskname[$i]} # ${apps_home_cask_notinstalled[$i]/$HOME/~}"
      ((i++))
    done
    echo ""
    echo ""
    echo "#############################"
    echo ""
    echo "### Apps not registered in Cask, but installed in /Applications."
    for a in "${apps_root_noncask[@]}";do
      echo "# $a"
    done
    echo ""
    echo "### Apps not registered in Cask, but installed in ~/Applications."
    for a in "${apps_home_noncask[@]/$HOME/~}";do
      echo "# $a"
    done
  } > Caskfile.txt
  #} |tee Caskfile.txt

  echo ""
  echo ""
  echo "### Summary ###"
  echo ""
  echo "Total: $((${#apps_root[@]} + ${#apps_home[@]})) Apps have been checked."
  echo "       (Apps of /Applications/*.app and ~/Applications/*.app)"
  echo ""
  echo "Installed by Cask:"
  echo "-  /Applications: ${#apps_root_cask_installed[@]} Apps"
  echo "- ~/Applications: ${#apps_home_cask_installed[@]} Apps"
  echo ""
  echo "Not installed by Cask, but can be installed by Cask:"
  echo "-  /Applications: ${#apps_root_cask_notinstalled[@]} Apps"
  echo "- ~/Applications: ${#apps_home_cask_notinstalled[@]} Apps"
  echo ""
  echo "No Cask Apps:"
  echo "-  /Applications: ${#apps_root_noncask[@]} Apps"
  echo "- ~/Applications: ${#apps_home_noncask[@]} Apps"
  echo ""

} # }}}

# }}}


# Main {{{

# Check Homebrew

if ! which brew >& /dev/null;then
  echo Homebrew is not installed!
  echo Install now...
  echo ruby -e \"\$\(curl -fsSL https://raw.github.com/mxcl/homebrew/go\)\"
  ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
  brew doctor
  if [ $? -ne 0 ];then
    echo
    echo "#################################"
    echo "#################################"
    echo "Check brew environment:"
    echo "    $ brew doctor"
    echo
    echo "Check later, anyway, let's continue..."
    echo "#################################"
    echo "#################################"
    echo
    echo
  fi
fi

# Cask list check
if [ $casklist -eq 1 ];then
  check_cask
  exit $?
fi

# Set BREWFILE repository
if [ $set_repo -eq 1 ];then
  set_brewfile_repo
  exit $?
fi

# Change brewfile if it is repository's one.
check_repo

# Do pull/push for the repository.
if [ $pull -eq 1 ] || [ $push -eq 1 ];then
  repomgr
fi

# brew command
if [ $brew -eq 1 ];then
  echo brew $brew_args
  brew $brew_args
  ret=$?
  if [ $ret -ne 0 ];then
    exit $ret
  fi
  initialize 0
  exit $?
fi

# Initialize
if [ $init -eq 1 ];then
  initialize
  exit $?
fi

# Check input file
# If the file doesn't exist, initialize it.
check_input_file
ret=$?
if [ $edit -ne 1 ] && [ $ret -ne 0 ];then
  exit $ret
fi

# Edit
if [ $edit -eq 1 ];then
  edit_brewfile
  exit 0
fi

# Get list for cleanup/install
get_list

# Cleanup
if [ $cleanup -eq 1 ];then
  cleanup
  exit $?
fi

# Install
if [ $brewall_inst -eq 1 ];then
  install
  exit $?
fi

# Update
if [ $update -eq 1 ];then
  if [ "$repo" != "" ];then
    repomgr pull
  fi
  install
  brew upgrade
  if [ "$repo" != "" ];then
    repomgr push
    dryrun=0
    cleanup
  fi
  exit 0
fi
# }}}
