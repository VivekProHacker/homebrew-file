#!/bin/bash

#############################################
# Brewall: Manager for packages of Homebrew
# https://github.com/rcmdnk/homebrew-brewall
version=0.0.6
#############################################

#The MIT License (MIT) {{{
#
#Copyright (c) 2013 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# }}}

# Variables {{{
def_input=${HOMEBREW_BREWFILE:-"/usr/local/Library/Brewfile"}
input="$def_input"
brewall_inst=0
brew=0
link=1
cleanup=0
dryrun=1
init=0
edit=0
tap_dir="/usr/local/Library/Taps"
if [ -d ~/Library/Caches/Homebrew ];then
  cache_dir=${HOMEBREW_CACHE:-"~/Library/Caches/Homebrew"}
else
  cache_dir=${HOMEBREW_CACHE:-"/Library/Caches/Homebrew"}
fi
cask_pack="brew-cask"
cask_repo="phinze/cask"
my_editor=${EDITOR:-"vim"}

# }}}

# Help {{{
HELP="Usage: $0 [-increvh][-f <input file>] command ...

Commands:
  brewall install            : Install packages in BREWFILE.
  brewall brew [command ...] : Execute brew command, and update BREWFILE.
  brewall init (or -i)       : Initialize/Update BREWFILE with installed packages.
  brewall clean (or -c )     : Clenup
                               Uninstall packages not in the list.
                               Untap packages not in the list.
                               Cleanup cache (brew cleanup)
                               By drault, cleanup runs as dry-run.
                               If you want to enforce cleanup, use '-r' option.
  brewall edit (or -e)       : Edit input file.
  brewall version (or -v)    : Show version.
  brewall help (or -h)       : Print Help (this message) and exit.

Options:
      -f  <file> Set input file (current default: ${def_input})
                 You can set input file by environmental variable,
                 HOMEBREW_BREWFILE, like:
                      export HOMEBREW_BREWFILE=~/.brewfile
      -n         Don't make links for Apps
      -r         Run cleanup in non dry-run mode.

"
# }}}

# Check arguments {{{
ncommands=0
while [ $# != 0 ] ; do
  case $1 in
    -f )
      input=$2; shift;
      ;;
    install)
      brewall_inst=1; : $((ncommands++));
      ;;
    brew)
      brew=1; shift; brew_args="$@"; : $((ncommands++)); break;
      ;;
    -i|init)
      init=1; : $((ncommands++));
      ;;
    -n)
      link=0;
      ;;
    -c|clean)
      cleanup=1; : $((ncommands++));
      ;;
    -r)
      dryrun=1;
      ;;
    -e|edit)
      edit=1; : $((ncommands++));
      ;;
    -v|version)
      echo "brewall v$version";exit 0;
      ;;
    -h|help)
      echo "$HELP" 1>&2; exit 0;
      ;;
    *)
      echo $1: unknown option; echo; echo "$HELP" 1>&2; exit 1;
  esac
  shift
done

if [ $ncommands -eq 0 ];then
  echo "$HELP" 1>&1; exit 0;
elif [ $ncommands -ne 1 ];then
  echo "More than 1 commands are given!";echo;
  echo "$HELP" 1>&1; exit 1;
fi
# }}}

# Function {{{

# Helper for yes/no {{{
function ask_yn {
  question="$1"
  printf "$1 [y/n]: "
  read yn
  while [ 1 ];do
    case $yn in
      "y"|"Y"|"yes"|"Yes"|"YES" )
        return 0
        ;;
      "n"|"N"|"no"|"No"|"NO" )
        return 1
        ;;
      * )
        printf "Answer with yes (y) or no (n): "
        read yn
        continue
        ;;
    esac
  done
} # }}}

# Helper for tap configuration file {{{
function get_tap {
  tap_user=`dirname $1`
  tap_repo=`basename $1`
  formulae=`ls ${tap_dir}/${tap_user}-${tap_repo}/*rb 2>/dev/null`
  tap_packs=()
  for f in ${formulae[@]};do
    tap_packs=(${tap_packs[@]} $(basename ${f%.rb}))
  done
  if [ ${#tap_packs[@]} -eq 0 ];then
    echo ""
    echo "WARNING: No formula is found in $tap_dir/${user}-${repo}, you might have already untap $1"
    echo "WARNING: or $1 doesn't have any formula."
    echo ""
  fi
  return 0
} # }}}

# Get list {{{
function get_list {
  brew_list=(`brew list`)
  tap_list=(`brew tap`)
  cask_list=(`brew cask list 2>/dev/null`)
} # }}}

# Read input file {{{
function read_input {
  # Check packages in the input file
  cask_input=()
  tap_input=()
  brew_input=()
  brew_input_opt=()
  while read line;do
    # Skip empty line/comment line
    line=${line%%#*}
    if [ "$line" = "" ];then
      continue
    fi
    # Get arguments
    args=(${line})
    cmd=${args[0]}
    p=`echo ${args[1]}|sed s:\'::g|sed s:\"::g`
    opt=`echo ${args[@]: 2}|sed s:\'::g|sed s:\"::g`
    if [ "$cmd" = "brew" ];then
      brew_input=(${brew_input[@]} $p)
      brew_input_opt=("${brew_input_opt[@]}" "$p $opt")
    elif [ "$cmd" = "tap" ];then
      tap_input=(${tap_input[@]} $p)
    elif [ "$cmd" = "tapall" ];then
      tap_input=(${tap_input[@]} $p)
      get_tap $p
      ret=$?
      if [ $ret -ne 0 ];then
        continue
      fi
      brew_input=(${brew_input[@]} $tap_packs)
    elif [ "$cmd" = "cask" ];then
      cask_input=(${cask_input[@]} $p)
    else
      echo "WARNING: $cmd is unknown, prease check $input."
      continue
    fi
  done < $input
} # }}}

# Initialize Brewfile {{{
function initialize {
  if [ -f $input ] && [ "$1" != "0" ];then
    echo "$input is already there."
    ask_yn "Do you want to overwrite it?"
    ret=$?
    if [ $ret -eq 0 ];then
      mv ${input} ${input}.bak
      echo "ok, old $input was moved to ${input}.bak"
    else
      return 1
    fi
  fi
  echo ""
  echo "***********************************************"
  echo "Initialize $input"
  echo "***********************************************"
  echo ""

  # Get installed package list
  get_list

  # Check list
  echo "# Tap repositories and their packages" |tee -a $input
  for p in ${tap_list[@]};do
    get_tap $p
    ret=$?
    if [ $ret -ne 0 ];then
      continue
    fi
    echo "tap '$p'" |tee -a $input
    for tp in ${tap_packs[@]};do
      if echo " ${brew_list[@]} "|grep -q " $tp ";then
        opt=`brew info $tp|grep "Built from source with"|cut -d: -f2`
        echo "brew '${tp}${opt}'" |tee -a $input
        brew_list=(`echo " ${brew_list[@]} "|sed "s: $tp : :g"`)
      fi
    done
    echo "" |tee -a $input
  done

  echo "" |tee -a $input
  echo "# Cask packages" |tee -a $input
  for p in ${cask_list[@]};do
    echo "cask '$p'" |tee -a $input
  done
  echo "" |tee -a $input
  echo "# Other Homebrew packages" |tee -a $input
  for p in ${brew_list[@]};do
    opt=`brew info $p|grep "Built from source with"|tail -n1|cut -d: -f2`
    echo "brew '${p}${opt}'" |tee -a $input
  done
  echo ""
  echo "***********************************************"
  echo "You can edit $input with:"
  echo "    $0 edit"
  echo "***********************************************"
  return 0
} # }}}

# Check input file {{{
function check_input_file {
  if [ ! -f $input ];then
    echo "WARNING: Input file $input is not found."
    ask_yn "WARNING: Do you want to initialize from installed packages?"
    ret=$?
    if [ $ret -eq 0 ];then
      initialize
      return $?
    else
      echo ""
      echo "WARNING: OK, please prepare Brewfile"
      echo "WARNING: or you can initialize $input with:"
      echo "WARNING:     $0 init"
      return 1
    fi
  fi
} # }}}

# Edit file {{{
function edit_brewfile {
  $my_editor $input
} # }}}

# Cleanup {{{
function cleanup {
  if [ $dryrun -eq 1 ];then
    echo ""
    echo "*******"
    echo "Dry Run"
    echo "*******"
    echo ""
  fi

  # Check packages in the input file
  read_input

  echo ""
  echo "*********************"
  echo "Cleanup cask packages"
  echo "*********************"
  echo ""
  for p in ${cask_list[@]};do
    if ! echo " ${cask_input[@]} "|grep -q " $p ";then
      echo brew cask uninstall $p
      if [ $dryrun -ne 1 ];then
        brew cask uninstall $p
      fi
      cask_list=(`echo " ${cask_list[@]} "|sed "s: ${p} : :g"`)
    fi
  done
  # Skip cask at tap/brew if any cask packages exist
  if [ ${#cask_list[@]} -ne 0 ];then
    tap_list=(`echo " ${tap_list[@]} "|sed "s: ${cask_repo} : :g"`)
    brew_list=(`echo " ${brew_list[@]} "|sed "s: ${cask_pack} : :g"`)
  fi

  echo ""
  echo "********************"
  echo "Cleanup tap packages"
  echo "********************"
  echo ""
  for p in ${tap_list[@]};do
    if ! echo " ${tap_input[@]} "|grep -q " $p ";then
      get_tap $p
      untapflag=1
      for tp in ${tap_packs[@]};do
        if echo " ${brew_input[@]} "|grep -q " $tp ";then
          # keep tap as related package is remained
          untapflag=0
          break
        fi
      done
      if [ $untapflag -eq 0 ];then
        continue
      fi
      echo brew untap $p
      if [ $dryrun -ne 1 ];then
        brew untap $p
      fi
    fi
  done

  echo ""
  echo "*********************"
  echo "Cleanup brew packages"
  echo "*********************"
  echo ""
  for p in ${brew_list[@]};do
    if ! echo " ${brew_input[@]} "|grep -q " $p ";then
      echo brew uninstall $p
      if [ $dryrun -ne 1 ];then
        app=$(basename $(brew info ${p% *}|grep "ln -s"|awk '{print $3}') 2>/dev/null)
        if [ "$app" != "" ];then
          rm -f /Applications/$app
          rm -f ~/Applications/$app
        fi
        brew uninstall $p
      fi
    fi
  done

  echo ""
  echo "*********************"
  echo "Cleanup cache        "
  echo "*********************"
  echo ""
  echo brew cleanup
  if [ $dryrun -ne 1 ];then
    brew cleanup
  fi

  echo ""
  echo "*********************************************************"
  echo "Some caches in $cache_dir may be remaind."
  echo "(caches of cask can't be cleaned up.)"
  echo "You may want to do:"
  echo "    $ brew cealnup --force"
  echo "or event just do:"
  echo "    $ rm -rf $cache_dir"
  echo "*********************************************************"
  echo ""

  if [ $dryrun -eq 1 ];then
    echo "*****************************************"
    echo "This is dry run."
    echo "If you want to enforce cleanup, use '-r':"
    echo "    $ $0 -c -r"
    echo "*****************************************"
  fi

  return 0
} # }}}

# Install {{{
function install {
  # Check packages in the input file
  read_input

  # Flag for cask
  if brew list|grep -q "${cask_pack}";then
    cask_installed=1
  else
    cask_installed=0
  fi

  # Tap
  for p in ${tap_input[@]};do
    if ! echo " ${tap_list[@]} "|grep -q " $p ";then
      echo brew tap $p
      brew tap $p
    fi
  done

  # Cask
  for p in ${cask_input[@]};do
    if ! echo " ${cask_list[@]} "|grep -q " $p ";then
      if [ $cask_installed -eq 0 ];then
        echo "cask has not been installed, install now."
        echo brew tap ${cask_repo}
        brew tap ${cask_repo}
        tap_list=(${tap_list[@]} ${cask_repo})
        get_tap ${cask_repo}
        if ! echo " ${tap_packs[@]} "|grep -q " ${cask_pack} ";then
          echo "WARNING: ${cask_pack} was not in ${cask_repo}."
          echo "WARNING: Maybe you need to modify cask_repo."
          continue
        fi
        echo brew install ${cask_pack}
        brew install ${cask_pack}
        brew_list=(${brew_list[@]} ${cask_pack})
        cask_installed=1
      fi
      echo brew cask install $p
      brew cask install $p
    fi
  done

  # Brew
  for p in "${brew_input_opt[@]}";do
    if ! echo " ${brew_list[@]} "|grep -q " ${p% *} ";then
      echo brew install $p
      brew install $p | tee .brewall_install_log
      linkcmd=`grep "ln -s" .brewall_install_log`
      if [ "$linkcmd" != "" ];then
        if [ "$link" -eq 1 ];then
          $linkcmd
        fi
      fi
      rm -f .brewall_install_log
    fi
  done

  return 0
} # }}}

# }}}

# Main {{{

# Check Homebrew

if ! which brew >& /dev/null;then
  echo Homebrew is not installed!
  echo Install now...
  echo ruby -e \"\$\(curl -fsSL https://raw.github.com/mxcl/homebrew/go\)\"
  ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
  brew doctor
  if [ $? -ne 0 ];then
    echo
    echo "#################################"
    echo "#################################"
    echo "Check brew environment:"
    echo "    $ brew doctor"
    echo
    echo "Check later, anyway, let's continue..."
    echo "#################################"
    echo "#################################"
    echo
    echo
  fi
fi

# brew command
if [ $brew -eq 1 ];then
  echo brew $brew_args
  brew $brew_args
  ret=$?
  if [ $ret -ne 0 ];then
    exit $ret
  fi
  initialize 0
  exit $?
fi

# Initialize
if [ $init -eq 1 ];then
  initialize
  exit $?
fi

# Check input file
# If the file doesn't exist, initialize it.
check_input_file
ret=$?
if [ $edit -ne 1 ] && [ $ret -ne 0 ];then
  exit $ret
fi

# Edit
if [ $edit -eq 1 ];then
  edit_brewfile
  exit 0
fi

# Get list for cleanup/install
get_list

# Cleanup
if [ $cleanup -eq 1 ];then
  cleanup
  exit $?
fi

# Install
if [ $brewall_inst -eq 1 ];then
  install
  exit $?
fi

# }}}
